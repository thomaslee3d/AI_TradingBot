import ccxt
import pandas as pd
from utils.config import Config
from utils.logger import get_logger
import talib

logger = get_logger()

def fetch_data():
    config = Config('config/config.yaml')
    exchange = ccxt.binance({
        'apiKey': config.get('BINANCE_API_KEY'),
        'secret': config.get('BINANCE_SECRET_KEY'),
        'enableRateLimit': True,
    })
    symbol = 'BTC/USDT'
    timeframe = '1h'
    limit = 1000
    ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
    data = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    data['timestamp'] = pd.to_datetime(data['timestamp'], unit='ms')
    data.set_index('timestamp', inplace=True)
    return data

def preprocess_data(data):
    # Handle missing values
    data.dropna(inplace=True)

    # Feature Engineering: Adding technical indicators
    data['SMA'] = talib.SMA(data['close'], timeperiod=20)
    data['RSI'] = talib.RSI(data['close'], timeperiod=14)
    data['MACD'], data['MACD_signal'], data['MACD_hist'] = talib.MACD(data['close'])

    # Drop rows with NaN values generated by indicators
    data.dropna(inplace=True)

    # Define target variable
    data['Target'] = 0  # 0: Hold, 1: Buy, -1: Sell
    buy_signals = (data['RSI'] < 30) & (data['MACD'] > data['MACD_signal'])
    sell_signals = (data['RSI'] > 70) & (data['MACD'] < data['MACD_signal'])
    data.loc[buy_signals, 'Target'] = 1
    data.loc[sell_signals, 'Target'] = -1

    return data
